package unboks.internal

import unboks.hierarchy.Accessible
import java.util.*
import kotlin.properties.ReadWriteProperty
import kotlin.reflect.KProperty

/**
 * Access modifiers for types (classes/interfaces), fields and methods.
 *
 * Not every modifier is valid for every type/field/method. For reference, see
 * JVMS table 4.1-A, 4.5-A and 4.6-A.
 */
internal enum class Access(shift: Int, vararg incompatible: Int)
	: ReadWriteProperty<Accessible, Boolean> {

	/** Declared public; may be accessed from outside its package. */
	PUBLIC       (0, 1, 2),

	/** Declared private; usable/accessible only within the defining class. */
	PRIVATE      (1, 0, 2),

	/** Declared protected; may be accessed within subclasses. */
	PROTECTED    (2, 0, 1),

	/** Declared static. */
	STATIC       (3),

	/** Types:   Declared final; no subclasses allowed.
	 *  Fields:  Declared final; never directly assigned to after object construction (JLS ยง17.5).
	 *  Methods: Declared final; must not be overridden (ยง5.4.5). */
	FINAL        (4),

	/** Treat superclass methods specially when invoked by the invokespecial instruction. */
	SUPER        (5),

	/** Declared synchronized; invocation is wrapped by a monitor use. */
	SYNCHRONIZED (5),

	/** Declared volatile; cannot be cached. */
	VOLATILE     (6),

	/** A bridge method, generated by the compiler. */
	BRIDGE       (6),

	/** Declared transient; not written or read by a persistent object manager. */
	TRANSIENT    (7),

	/** Declared with variable number of arguments. */
	VARARGS      (7),

	/** Declared native; implemented in a language other than Java. */
	NATIVE       (8),

	/** Is an interface, not a class. */
	INTERFACE    (9),

	/** Types:   Declared abstract; must not be instantiated.
	 *  Methods: Declared abstract; no implementation is provided. */
	ABSTRACT    (10),

	/** Declared strictfp; floating-point mode is FP-strict. */
	STRICT      (11),

	/** Declared synthetic; not present in the source code. */
	SYNTHETIC   (12),

	/** Declared as an annotation type. */
	ANNOTATION  (13),

	/** Types: Declared as an enum type.
	 *  Fields: Declared as an element of an enum. */
	ENUM        (14);

	val mask = 1 shl shift
	private val clearMask = incompatible
			.fold(0) { acc, shift -> acc or (1 shl shift) }
			.inv()

	override fun getValue(thisRef: Accessible, property: KProperty<*>): Boolean {
		return thisRef.access and mask != 0
	}

	override fun setValue(thisRef: Accessible, property: KProperty<*>, value: Boolean) {
		if (value)
			thisRef.access = (thisRef.access and clearMask) or mask
		else
			thisRef.access = thisRef.access and mask.inv()
	}
}
