Future of this package ================
If relevant again, put in unboks-hierarchy maven module.


Generic parameters ================
Make new Parameter type that UnboksMethods takes as arguments (so we can provide generics as well)
- what about return?



Annotations ================
- Create simple node/leaf structure resembling AnnotationVisitor

Make Parameter (see above), Unboks{Method,Field,Type} Annotatable

/*
public class AnnotationTest {

	public @interface OtherAnno { }

	@TestAnno("ANNOTATION_TYPE")
	@Target({ TYPE,FIELD,METHOD,PARAMETER,CONSTRUCTOR,LOCAL_VARIABLE,ANNOTATION_TYPE,PACKAGE,TYPE_PARAMETER,TYPE_USE/*,MODULE*/ })
	@Retention(RetentionPolicy.RUNTIME) // Consider CLASS...
	public @interface TestAnno {

		String value();

		OtherAnno anno() default @OtherAnno;

		Class<?> cls() default String.class;

		int[] intArray() default { 1, 2 }; // Kun 1d arrays.
	}


	@TestAnno("TYPE") // TYPE_USE
	private static class TargetTestClass<@TestAnno("TYPE_PARAMETER") T> { // TYPE_USE

		@TestAnno("FIELD")
		private Set<@TestAnno("TYPE_PARAMETER") String> field;

		@TestAnno("CONSTRUCTOR")
		public TargetTestClass() {

		}

		@TestAnno("METHOD")
		public static void method(@TestAnno("PARAMETER") int param, Map<@TestAnno("keyT") String, @TestAnno("valueT") Integer> cls) {

			@TestAnno("LOCAL_VARIABLE")
			int i = 123;
		}
	}

}
*/